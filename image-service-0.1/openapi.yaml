openapi: 3.0.0
info:
  license:
    name: Scavenger Arts & Media
  title: Scavenger Image Service
  version: "0.1"
servers:
- description: production
  url: https://images.scavengerarts.com
- description: local environment
  url: http://localhost:8001
paths:
  /upload:
    post:
      description: |
        Upload an image to the service.
      operationId: uploadImage
      requestBody:
        $ref: '#/components/requestBodies/Image'
      responses:
        "201":
          content:
            application/json:
              examples:
                default:
                  value:
                    key: example.jpg
                    url: https://images.scavengerarts.com/example.jpg
              schema:
                $ref: '#/components/schemas/uploadImage_201_response'
          description: image uploaded
        "403":
          content:
            application/json:
              examples:
                default:
                  value:
                    message: forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: unauthorized
        "500":
          content:
            application/json:
              examples:
                default:
                  value:
                    message: server error
              schema:
                $ref: '#/components/schemas/Error'
          description: server error
      summary: Upload Image
      tags:
      - core
  /image/{key}:
    get:
      description: |
        Retrieve an image from the service. Optionally manipulate the image using query string parameters.
      operationId: getImage
      parameters:
      - description: key of the image to get
        example:
        - example.jpg
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: width of image to return
        example:
          width: 500
        explode: true
        in: query
        name: width
        required: false
        schema:
          type: number
        style: form
      - description: height of image to return
        example:
          height: 500
        explode: true
        in: query
        name: height
        required: false
        schema:
          type: number
        style: form
      - description: quality of returned image. value should be between 1 and 5
        example:
          quality: 3
        explode: true
        in: query
        name: quality
        required: false
        schema:
          type: number
        style: form
      responses:
        "200":
          content:
            image/png:
              schema:
                format: binary
                type: string
          description: OK
        "404":
          content:
            text/plain:
              examples:
                default:
                  value: image not found
              schema:
                type: string
          description: image not found
        "500":
          content:
            application/json:
              examples:
                default:
                  value:
                    message: server error
              schema:
                $ref: '#/components/schemas/Error'
          description: server error
      summary: Get Image
      tags:
      - core
  /version:
    get:
      description: |
        Application version for the service
      operationId: getAppVersion
      responses:
        "200":
          content:
            text/plain:
              example: "{\"default\":{\"value\":\"386ea43d9d8ec570ceba715438d30d7b28b3e33e\"\
                }}"
              schema:
                type: string
          description: success
        "500":
          content:
            application/json:
              examples:
                default:
                  value:
                    message: server error
              schema:
                $ref: '#/components/schemas/Error'
          description: server error
      summary: Get version
      tags:
      - diagnostic
components:
  requestBodies:
    Image:
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/uploadImage_request'
      description: image payload
  schemas:
    Error:
      properties:
        message:
          title: message
          type: string
      required:
      - message
      title: Error
    uploadImage_request:
      properties:
        file:
          items:
            format: binary
            type: string
          title: file
          type: array
        key:
          title: key
          type: string
      title: uploadImage_request
      type: object
    uploadImage_201_response:
      example:
        key: key
        url: url
      properties:
        key:
          title: key
          type: string
        url:
          title: url
          type: string
      title: uploadImage_201_response
